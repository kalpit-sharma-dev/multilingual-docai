# Production Docker Compose file for PS-05 Challenge

services:
  # Main PS-05 Backend Service (Production)
  ps05-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ps05-backend-prod
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - ENVIRONMENT=production
      - LOG_LEVEL=WARNING
      - WORKERS=4
      - MAX_REQUESTS=1000
      - MAX_REQUESTS_JITTER=100
    volumes:
      - ./datasets:/app/datasets:ro
      - ./results:/app/results
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - ./data:/app/data
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 8G
          cpus: '4.0'
        reservations:
          memory: 4G
          cpus: '2.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Load Balancer (Production)
  nginx:
    image: nginx:alpine
    container_name: ps05-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./results:/var/www/results:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - ps05-backend
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (Production)
  redis:
    image: redis:7-alpine
    container_name: ps05-redis-prod
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL for metadata (Production)
  postgres:
    image: postgres:15-alpine
    container_name: ps05-postgres-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ps05_challenge_prod
      POSTGRES_USER: ps05_user_prod
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-ps05_secure_password_2024}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d:ro
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ps05_user_prod -d ps05_challenge_prod"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring (Production)
  monitoring:
    image: prom/prometheus:latest
    container_name: ps05-monitoring-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.prod.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=168h'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Grafana (Production)
  grafana:
    image: grafana/grafana:latest
    container_name: ps05-grafana-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin_secure_2024}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SECURITY_DISABLE_GRAVATAR=true
      - GF_ANALYTICS_REPORTING_ENABLED=false
      - GF_ANALYTICS_CHECK_FOR_UPDATES=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - monitoring
    networks:
      - ps05-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Backup service
  backup:
    image: alpine:latest
    container_name: ps05-backup
    restart: "no"
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data:ro
      - ./results:/results:ro
    command: |
      sh -c "
        apk add --no-cache postgresql-client tar gzip &&
        mkdir -p /backups/$$(date +%Y%m%d_%H%M%S) &&
        pg_dump -h postgres -U ps05_user_prod -d ps05_challenge_prod > /backups/$$(date +%Y%m%d_%H%M%S)/database.sql &&
        tar -czf /backups/$$(date +%Y%m%d_%H%M%S)/results.tar.gz -C /results . &&
        echo 'Backup completed: $$(date)'
      "
    environment:
      - PGPASSWORD=${POSTGRES_PASSWORD:-ps05_secure_password_2024}
    networks:
      - ps05-prod-network
    depends_on:
      - postgres

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  ps05-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
    driver_opts:
      com.docker.network.bridge.name: ps05-prod-br0
